{"compilation_units": {"/Users/alpharush/tob/slither/tests/e2e/detectors/test_data/assembly/0.5.16/inline_assembly_contract.sol": {"compiler": {"compiler": "solc", "version": "0.5.16", "optimized": false}, "source_units": {"tests/e2e/detectors/test_data/assembly/0.5.16/inline_assembly_contract.sol": {"ast": {"absolutePath": "tests/e2e/detectors/test_data/assembly/0.5.16/inline_assembly_contract.sol", "exportedSymbols": {"GetCode": [23]}, "id": 24, "nodeType": "SourceUnit", "nodes": [{"id": 13, "literals": ["solidity", "^", "0.5", ".1"], "nodeType": "PragmaDirective", "src": "0:23:1"}, {"baseContracts": [], "contractDependencies": [], "contractKind": "library", "documentation": null, "fullyImplemented": true, "id": 23, "linearizedBaseContracts": [23], "name": "GetCode", "nodeType": "ContractDefinition", "nodes": [{"body": {"id": 21, "nodeType": "Block", "src": "188:638:1", "statements": [{"externalReferences": [{"_addr": {"declaration": 15, "isOffset": false, "isSlot": false, "src": "311:5:1", "valueSize": 1}}, {"o_code": {"declaration": 18, "isOffset": false, "isSlot": false, "src": "464:6:1", "valueSize": 1}}, {"o_code": {"declaration": 18, "isOffset": false, "isSlot": false, "src": "675:6:1", "valueSize": 1}}, {"o_code": {"declaration": 18, "isOffset": false, "isSlot": false, "src": "787:6:1", "valueSize": 1}}, {"o_code": {"declaration": 18, "isOffset": false, "isSlot": false, "src": "565:6:1", "valueSize": 1}}, {"_addr": {"declaration": 15, "isOffset": false, "isSlot": false, "src": "776:5:1", "valueSize": 1}}], "id": 20, "nodeType": "InlineAssembly", "operations": "{\n    let size := extcodesize(_addr)\n    o_code := mload(0x40)\n    mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n    mstore(o_code, size)\n    extcodecopy(_addr, add(o_code, 0x20), 0, size)\n}", "src": "198:622:1"}]}, "documentation": null, "id": 22, "implemented": true, "kind": "function", "modifiers": [], "name": "at", "nodeType": "FunctionDefinition", "parameters": {"id": 16, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 15, "name": "_addr", "nodeType": "VariableDeclaration", "scope": 22, "src": "131:13:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 14, "name": "address", "nodeType": "ElementaryTypeName", "src": "131:7:1", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}], "src": "130:15:1"}, "returnParameters": {"id": 19, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 18, "name": "o_code", "nodeType": "VariableDeclaration", "scope": 22, "src": "167:19:1", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes"}, "typeName": {"id": 17, "name": "bytes", "nodeType": "ElementaryTypeName", "src": "167:5:1", "typeDescriptions": {"typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes"}}, "value": null, "visibility": "internal"}], "src": "166:21:1"}, "scope": 23, "src": "119:707:1", "stateMutability": "view", "superFunction": null, "visibility": "public"}], "scope": 24, "src": "97:731:1"}], "src": "0:830:1"}, "contracts": {"GetCode": {"abi": [{"constant": true, "inputs": [{"internalType": "address", "name": "_addr", "type": "address"}], "name": "at", "outputs": [{"internalType": "bytes", "name": "o_code", "type": "bytes"}], "payable": false, "stateMutability": "view", "type": "function"}], "bin": "610157610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063dce4a4471461003a575b600080fd5b61007c6004803603602081101561005057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506100f7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100bc5780820151818401526020810190506100a1565b50505050905090810190601f1680156100e95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6060813b6040519150601f19601f602083010116820160405280825280600060208401853c5091905056fea265627a7a723158204b6de73308f61344bb7fc58e54e78abb7893c0565ef2b892e7dcc397bc03458264736f6c63430005100032", "bin-runtime": "73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063dce4a4471461003a575b600080fd5b61007c6004803603602081101561005057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506100f7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100bc5780820151818401526020810190506100a1565b50505050905090810190601f1680156100e95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6060813b6040519150601f19601f602083010116820160405280825280600060208401853c5091905056fea265627a7a723158204b6de73308f61344bb7fc58e54e78abb7893c0565ef2b892e7dcc397bc03458264736f6c63430005100032", "srcmap": "97:731:1:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24", "srcmap-runtime": "97:731:1:-;;;;;;;;;;;;;;;;;;;;;;;;119:707;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;119:707:1;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;119:707:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;167:19;311:5;299:18;480:4;474:11;464:21;;609:4;605:9;598:4;591;585;581:15;577:26;573:42;565:6;561:55;555:4;548:69;683:4;675:6;668:20;805:4;802:1;795:4;787:6;783:17;776:5;764:46;207:613;;;;:::o", "filenames": {"absolute": "/Users/alpharush/tob/slither/tests/e2e/detectors/test_data/assembly/0.5.16/inline_assembly_contract.sol", "used": "tests/e2e/detectors/test_data/assembly/0.5.16/inline_assembly_contract.sol", "short": "tests/e2e/detectors/test_data/assembly/0.5.16/inline_assembly_contract.sol", "relative": "tests/e2e/detectors/test_data/assembly/0.5.16/inline_assembly_contract.sol"}, "libraries": {}, "is_dependency": false, "userdoc": {"methods": {}, "notice": null}, "devdoc": {"methods": {}, "author": null, "details": null, "title": null}}}}}, "filenames": [{"absolute": "/Users/alpharush/tob/slither/tests/e2e/detectors/test_data/assembly/0.5.16/inline_assembly_contract.sol", "used": "/Users/alpharush/tob/slither/tests/e2e/detectors/test_data/assembly/0.5.16/inline_assembly_contract.sol", "short": "tests/e2e/detectors/test_data/assembly/0.5.16/inline_assembly_contract.sol", "relative": "tests/e2e/detectors/test_data/assembly/0.5.16/inline_assembly_contract.sol"}, {"absolute": "/Users/alpharush/tob/slither/tests/e2e/detectors/test_data/assembly/0.5.16/inline_assembly_contract.sol", "used": "tests/e2e/detectors/test_data/assembly/0.5.16/inline_assembly_contract.sol", "short": "tests/e2e/detectors/test_data/assembly/0.5.16/inline_assembly_contract.sol", "relative": "tests/e2e/detectors/test_data/assembly/0.5.16/inline_assembly_contract.sol"}]}}, "package": null, "working_dir": "/Users/alpharush/tob/slither", "type": 1, "unit_tests": [], "crytic_version": "0.0.2", "source_content": {"/Users/alpharush/tob/slither/tests/e2e/detectors/test_data/assembly/0.5.16/inline_assembly_contract.sol": "pragma solidity ^0.5.1;\n\n// taken from https://solidity.readthedocs.io/en/v0.4.25/assembly.html\n\nlibrary GetCode {\n    function at(address _addr) public view returns (bytes memory o_code) {\n        assembly {\n            // retrieve the size of the code, this needs assembly\n            let size := extcodesize(_addr)\n            // allocate output byte array - this could also be done without assembly\n            // by using o_code = new bytes(size)\n            o_code := mload(0x40)\n            // new \"memory end\" including padding\n            mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n            // store length in memory\n            mstore(o_code, size)\n            // actually retrieve the code, this needs assembly\n            extcodecopy(_addr, add(o_code, 0x20), 0, size)\n        }\n    }\n}\n\n"}}