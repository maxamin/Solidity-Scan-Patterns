{"compilation_units": {"/Users/alpharush/tob/slither/tests/e2e/detectors/test_data/assembly/0.4.25/inline_assembly_contract.sol": {"compiler": {"compiler": "solc", "version": "0.4.25", "optimized": false}, "source_units": {"tests/e2e/detectors/test_data/assembly/0.4.25/inline_assembly_contract.sol": {"ast": {"absolutePath": "tests/e2e/detectors/test_data/assembly/0.4.25/inline_assembly_contract.sol", "exportedSymbols": {"GetCode": [23]}, "id": 24, "nodeType": "SourceUnit", "nodes": [{"id": 13, "literals": ["solidity", "^", "0.4", ".0"], "nodeType": "PragmaDirective", "src": "0:23:1"}, {"baseContracts": [], "contractDependencies": [], "contractKind": "library", "documentation": null, "fullyImplemented": true, "id": 23, "linearizedBaseContracts": [23], "name": "GetCode", "nodeType": "ContractDefinition", "nodes": [{"body": {"id": 21, "nodeType": "Block", "src": "181:638:1", "statements": [{"externalReferences": [{"_addr": {"declaration": 15, "isOffset": false, "isSlot": false, "src": "304:5:1", "valueSize": 1}}, {"o_code": {"declaration": 18, "isOffset": false, "isSlot": false, "src": "457:6:1", "valueSize": 1}}, {"o_code": {"declaration": 18, "isOffset": false, "isSlot": false, "src": "668:6:1", "valueSize": 1}}, {"o_code": {"declaration": 18, "isOffset": false, "isSlot": false, "src": "558:6:1", "valueSize": 1}}, {"o_code": {"declaration": 18, "isOffset": false, "isSlot": false, "src": "780:6:1", "valueSize": 1}}, {"_addr": {"declaration": 15, "isOffset": false, "isSlot": false, "src": "769:5:1", "valueSize": 1}}], "id": 20, "nodeType": "InlineAssembly", "operations": "{\n    let size := extcodesize(_addr)\n    o_code := mload(0x40)\n    mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n    mstore(o_code, size)\n    extcodecopy(_addr, add(o_code, 0x20), 0, size)\n}", "src": "191:628:1"}]}, "documentation": null, "id": 22, "implemented": true, "isConstructor": false, "isDeclaredConst": true, "modifiers": [], "name": "at", "nodeType": "FunctionDefinition", "parameters": {"id": 16, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 15, "name": "_addr", "nodeType": "VariableDeclaration", "scope": 22, "src": "131:13:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 14, "name": "address", "nodeType": "ElementaryTypeName", "src": "131:7:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": null, "visibility": "internal"}], "src": "130:15:1"}, "payable": false, "returnParameters": {"id": 19, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 18, "name": "o_code", "nodeType": "VariableDeclaration", "scope": 22, "src": "167:12:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes"}, "typeName": {"id": 17, "name": "bytes", "nodeType": "ElementaryTypeName", "src": "167:5:1", "typeDescriptions": {"typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes"}}, "value": null, "visibility": "internal"}], "src": "166:14:1"}, "scope": 23, "src": "119:700:1", "stateMutability": "view", "superFunction": null, "visibility": "public"}], "scope": 24, "src": "97:724:1"}], "src": "0:823:1"}, "contracts": {"GetCode": {"abi": [{"constant": true, "inputs": [{"name": "_addr", "type": "address"}], "name": "at", "outputs": [{"name": "o_code", "type": "bytes"}], "payable": false, "stateMutability": "view", "type": "function"}], "bin": "610163610030600b82828239805160001a6073146000811461002057610022565bfe5b5030600052607381538281f3007300000000000000000000000000000000000000003014608060405260043610610058576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063dce4a4471461005d575b600080fd5b610091600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061010c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100d15780820151818401526020810190506100b6565b50505050905090810190601f1680156100fe5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6060813b6040519150601f19601f602083010116820160405280825280600060208401853c509190505600a165627a7a7230582048ac5aaf8e3b6153d97017e9a80f12d2e4ec3c7e71b365af394f31f4a0b0c8410029", "bin-runtime": "7300000000000000000000000000000000000000003014608060405260043610610058576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063dce4a4471461005d575b600080fd5b610091600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061010c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100d15780820151818401526020810190506100b6565b50505050905090810190601f1680156100fe5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6060813b6040519150601f19601f602083010116820160405280825280600060208401853c509190505600a165627a7a7230582048ac5aaf8e3b6153d97017e9a80f12d2e4ec3c7e71b365af394f31f4a0b0c8410029", "srcmap": "97:724:1:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24", "srcmap-runtime": "97:724:1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;119:700;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;119:700:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;167:12;304:5;292:18;473:4;467:11;457:21;;602:4;598:9;591:4;584;578;574:15;570:26;566:42;558:6;554:55;548:4;541:69;676:4;668:6;661:20;798:4;795:1;788:4;780:6;776:17;769:5;757:46;200:613;;;;:::o", "filenames": {"absolute": "/Users/alpharush/tob/slither/tests/e2e/detectors/test_data/assembly/0.4.25/inline_assembly_contract.sol", "used": "tests/e2e/detectors/test_data/assembly/0.4.25/inline_assembly_contract.sol", "short": "tests/e2e/detectors/test_data/assembly/0.4.25/inline_assembly_contract.sol", "relative": "tests/e2e/detectors/test_data/assembly/0.4.25/inline_assembly_contract.sol"}, "libraries": {}, "is_dependency": false, "userdoc": {"methods": {}, "notice": null}, "devdoc": {"methods": {}, "author": null, "details": null, "title": null}}}}}, "filenames": [{"absolute": "/Users/alpharush/tob/slither/tests/e2e/detectors/test_data/assembly/0.4.25/inline_assembly_contract.sol", "used": "tests/e2e/detectors/test_data/assembly/0.4.25/inline_assembly_contract.sol", "short": "tests/e2e/detectors/test_data/assembly/0.4.25/inline_assembly_contract.sol", "relative": "tests/e2e/detectors/test_data/assembly/0.4.25/inline_assembly_contract.sol"}, {"absolute": "/Users/alpharush/tob/slither/tests/e2e/detectors/test_data/assembly/0.4.25/inline_assembly_contract.sol", "used": "/Users/alpharush/tob/slither/tests/e2e/detectors/test_data/assembly/0.4.25/inline_assembly_contract.sol", "short": "tests/e2e/detectors/test_data/assembly/0.4.25/inline_assembly_contract.sol", "relative": "tests/e2e/detectors/test_data/assembly/0.4.25/inline_assembly_contract.sol"}]}}, "package": null, "working_dir": "/Users/alpharush/tob/slither", "type": 1, "unit_tests": [], "crytic_version": "0.0.2", "source_content": {"/Users/alpharush/tob/slither/tests/e2e/detectors/test_data/assembly/0.4.25/inline_assembly_contract.sol": "pragma solidity ^0.4.0;\n\n// taken from https://solidity.readthedocs.io/en/v0.4.25/assembly.html\n\nlibrary GetCode {\n    function at(address _addr) public view returns (bytes o_code) {\n        assembly {\n            // retrieve the size of the code, this needs assembly\n            let size := extcodesize(_addr)\n            // allocate output byte array - this could also be done without assembly\n            // by using o_code = new bytes(size)\n            o_code := mload(0x40)\n            // new \"memory end\" including padding\n            mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n            // store length in memory\n            mstore(o_code, size)\n            // actually retrieve the code, this needs assembly\n            extcodecopy(_addr, add(o_code, 0x20), 0, size)\n        }\n    }\n}\n\n"}}